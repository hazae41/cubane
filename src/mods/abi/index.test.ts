export * from "./types/index.test.js";

import { Readable } from "@hazae41/binary";
import { Bytes } from "@hazae41/bytes";
import { test } from "@hazae41/phobos";
import { Cubane } from "index.js";
import { tryDecode, tryEncode, tryReadFromBytes } from "./index.js";
import { FunctionSignature } from "./signature/signature.js";
import { StaticAddress } from "./types/address/address.js";
import { createDynamicArray } from "./types/array/array.js";
import { createDynamicTuple } from "./types/tuple/tuple.js";
import { createDynamicVector } from "./types/vector/vector.js";

test("test", async () => {
  const abi = "f71870b100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000568656c6c6f000000000000000000000000000000000000000000000000000000"
  const signature = FunctionSignature.tryParse("test(bool,string,uint256)").unwrap()
  const decoded = tryReadFromBytes(signature, Bytes.fromHexSafe(abi)).unwrap()
  console.log(decoded)
})

test("test", async () => {
  const abi = "000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa9604500000000000000000000000076a65814b6e0fa5a3598ef6503fa1d990ec0e61a000000000000000000000000d66832ff9d808b32adfe0136a0381054f3600185"
  const decoded = Readable.tryReadFromBytes(createDynamicArray(StaticAddress, 3), Bytes.fromHexSafe(abi)).unwrap()
  console.log(decoded)
})

test("test", async () => {
  const abi = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa9604500000000000000000000000076a65814b6e0fa5a3598ef6503fa1d990ec0e61a000000000000000000000000d66832ff9d808b32adfe0136a0381054f3600185"
  const decoded = Readable.tryReadFromBytes(createDynamicTuple(createDynamicVector(StaticAddress)), Bytes.fromHexSafe(abi)).unwrap()
  console.log(decoded.inner)
})

test("runtime encode then decode", async () => {
  const signature = FunctionSignature.tryParse("f(bool,uint256,(string,address[3])[],bytes)").unwrap()

  const hex = tryEncode(signature,
    true,
    123456789n,
    [
      [
        "hello world",
        [
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
        ]
      ],
    ],
    new Uint8Array([1, 2, 3])
  ).unwrap()

  const funcAndArgs = tryDecode(signature, hex).unwrap()

  console.log(funcAndArgs.args.inner[2])
})

test("codegen", async () => {
  const signature = FunctionSignature.tryParse("f(bool,uint256,(string,address[3])[],bytes)").unwrap()

  console.log(signature.inner.args.codegen())
})

const signature = FunctionSignature.tryParse("f(bool,uint256,(string,address[3])[],bytes)").unwrap()

console.log(signature.inner.args.codegen())

/**
 * This code was autogenerated
 */
const f = Cubane.Abi.createDynamicTuple(Cubane.Abi.StaticBool, Cubane.Abi.createStaticBigUint(32), Cubane.Abi.createDynamicVector(Cubane.Abi.createDynamicTuple(Cubane.Abi.DynamicString, Cubane.Abi.createDynamicArray(Cubane.Abi.StaticAddress, 3))), Cubane.Abi.DynamicBytes)

const hex = f.from([
  true,
  123456789n,
  [
    [
      "hello world",
      [
        "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
        "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
        "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
      ] as const
    ],
  ],
  new Uint8Array([1, 2, 3])]).encode()

